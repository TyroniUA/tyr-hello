{"version":3,"sources":["QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","state","quote","author","bg","getQuote","bind","this","console","log","colors","randomNum","Math","floor","random","length","iColor","randomQuote","randomAuthor","randomColor","setState","document","body","style","backgroundColor","firstQuote","id","color","target","href","encodeURI","icon","faTwitter","onClick","background","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTA0EeA,E,YArEX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRC,GAAI,IAER,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAPN,E,0EAYa,KAAnBC,KAAKN,MAAMC,OACXK,KAAKF,a,iCAKTG,QAAQC,IAAI,6BACZ,IAAIP,EAAQ,CAAC,iJAA+B,iJAA+B,mBAAoB,UAAW,QAAQ,oBAAoB,uBAElIQ,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACnIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAMa,QAC7CC,EAAQJ,KAAKC,MAAMD,KAAKE,SAASJ,EAAOK,QAExCE,EAAcf,EAAMS,GACpBO,EANU,CAAC,mDAAY,wCAAyC,KAAM,QAAS,aAAc,SAAS,QAM/EP,GACvBQ,EAAYT,EAAOM,GAEvBT,KAAKa,SAAS,CACVlB,MAAOe,EACPd,OAAQe,EACRd,GAAIe,IAGRE,SAASC,KAAKC,MAAMC,gBAAiBL,I,+BASrC,OAHAZ,KAAKkB,aACLjB,QAAQC,IAAIF,KAAKN,MAAMC,MAAOK,KAAKN,MAAME,QAIrC,yBAAKuB,GAAG,aAEJ,uBAAGA,GAAG,OAAOH,MAAO,CAAEI,MAAOpB,KAAKN,MAAMG,KAAxC,IAAgDG,KAAKN,MAAMC,OAC3D,uBAAGwB,GAAG,SAASH,MAAO,CAAEI,MAAOpB,KAAKN,MAAMG,KAA1C,IAAkDG,KAAKN,MAAME,QAC7D,yBAAKuB,GAAG,WACJ,4BACAA,GAAG,QACHE,OAAO,SACPC,KAAMC,UAAU,yCAAD,OAA0CvB,KAAKN,MAAMC,MAArD,wBAEf,kBAAC,IAAD,CAAiB6B,KAAMC,OAE3B,4BAAQN,GAAG,YAAYO,QAAS1B,KAAKF,SAAUkB,MAAO,CAAEW,WAAY3B,KAAKN,MAAMG,KAA/E,aACA,6BAEA,mC,GA9DW+B,IAAMC,WCUlBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4b7e8146.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nclass QuoteMachine extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            quote: '',\r\n            author: '',\r\n            bg: ''\r\n        }\r\n        this.getQuote = this.getQuote.bind(this);\r\n       \r\n    }\r\n\r\n    firstQuote(){\r\n        if (this.state.quote===''){\r\n            this.getQuote()\r\n        }\r\n            \r\n    }\r\n    getQuote() {\r\n        console.log(\"GetQuote function clicked\");\r\n        let quote = ['Скажи еще спасибо что живой', 'Пидпис Здесь и Пидпис Здесь', 'Here we go again', 'Wub Wub', 'Yolka','I Never told that','Zdravstvuyte, Tsar.'];\r\n        let authors = ['Высоцкий', 'Anonymous of Ukrainian public service', 'CJ', 'Robot', 'Yanukovich', 'Buddha','Tsar']\r\n        let colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\r\n        let randomNum = Math.floor(Math.random() * quote.length)\r\n        let iColor =Math.floor(Math.random()*colors.length)\r\n\r\n        let randomQuote = quote[randomNum];\r\n        let randomAuthor = authors[randomNum];\r\n        let randomColor=colors[iColor]\r\n\r\n        this.setState({\r\n            quote: randomQuote,\r\n            author: randomAuthor,\r\n            bg: randomColor\r\n            \r\n        });\r\n        document.body.style.backgroundColor= randomColor;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        this.firstQuote()\r\n        console.log(this.state.quote, this.state.author);\r\n\r\n        return (\r\n\r\n            <div id='quote-box'>\r\n\r\n                <p id='text' style={{ color: this.state.bg }}>\"{this.state.quote}</p>\r\n                <p id='author' style={{ color: this.state.bg }}>-{this.state.author}</p>\r\n                <div id='buttons'>\r\n                    <button\r\n                    id=\"tweet\"\r\n                    target=\"_blank\"\r\n                    href={encodeURI(`https://twitter.com/intent/tweet?text=${this.state.quote}&hashtags=uatyroni`)}\r\n                >\r\n                    <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon>\r\n                </button>\r\n                <button id='new-quote' onClick={this.getQuote} style={{ background: this.state.bg }}>New Quote</button>\r\n                <br />\r\n                \r\n                <br /></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default QuoteMachine;","import React from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteMachine/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}